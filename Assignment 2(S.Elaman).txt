1. 
O(n^2)
trimToSize() is O(n)






2.
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
public class Main{
    public static void printInReverse(List<Integer> a){
        for(int i = a.size() - 1; i >= 0; i--){
            if(i == 0){
                System.out.print(a.get(i));
            }
            else{
                System.out.print(a.get(i) + "->");
            }
        }
    }
    public static void main(String [] args){
        Scanner sc = new Scanner(System.in);
        LinkedList<Integer> b = new LinkedList<>();
        String str = sc.next();
        String[] nums = str.split("->");
        for(String a : nums){
            b.add(Integer.valueOf(a));
        }
        printInReverse(b);
    }
}






3.
import java.util.LinkedList;
import java.util.Scanner;

public class Main{
    public static void main(String [] args){
        Scanner sc = new Scanner(System.in);
        LinkedList<Integer> b = new LinkedList<>();
        String str = sc.next();
        String[] nums = str.split("->");
        for(String a : nums){
            b.add(Integer.valueOf(a));
        }
        int c = sc.nextInt();
        System.out.println(b.get(c));
    }
}








4. 
import java.util.*;

public class Main{
    public static void deleteDuplicate(LinkedList<Integer> a){
        for(int i = 0; i < a.size() - 1; i++){
            if(Objects.equals(a.get(i), a.get(i + 1))){
                a.remove(i--);
            }
        }
    }
    public static void main(String [] args){
        Scanner sc = new Scanner(System.in);
        LinkedList<Integer> b = new LinkedList<>();
        String str = sc.next();
        String[] nums = str.split("->");
        for(String a : nums){
            b.add(Integer.valueOf(a));
        }
        Collections.sort(b);
        deleteDuplicate(b);
        for(Integer a : b){
            System.out.print(a + " ");
        }
    }
}


